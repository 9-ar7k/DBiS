<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//controller/not
selControl = 1;

//vars
grav = .7;
vsp = 0;
hsp = 0;
move = 0;
slideMove = 1;
isAtk = 0;

//move
moveSpeed = 0;
moveIncrement = .5;
moveCap = 15;
finalHsp = 0;
fullSpeed = 0;

//jump
jumpSpeed = 8;
jumpCap = 8;
grounded = 0;
jump = 0;
jumpIncrement = 0;
jumpPlus = 0.5;
doubleJump = 0;


//life n death
lifepts = 0;

//platCol = 0;

playerState = '';

image_speed = 0.50;
depth = -1;

//atck
atck_num = 0;
atck[0] = spr_player_atk_1;
atck[1] = spr_player_atk_2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO STUFF PLZ
key_selControl = keyboard_check_pressed(ord("O"));
if (key_selControl) selControl = !selControl;

switch selControl{

case 0:
    key_right = keyboard_check(vk_right);
    key_left = keyboard_check(vk_left);
    key_jumpInit = keyboard_check_pressed(vk_up);
    key_jumpHold = keyboard_check(vk_up);
    key_moveReleaseR = keyboard_check_released(vk_right);
    //key_atkRelease = keyboard_check_released(ord("Z"));
    key_moveReleaseL = keyboard_check_released(vk_left);
    key_movePressR = keyboard_check_pressed(vk_right);
    key_movePressL = keyboard_check_pressed(vk_left);
    
    
    key_atck = 
        keyboard_check_pressed(ord("Z")) ||
        keyboard_check_pressed(ord("X")) ||
        keyboard_check_pressed(ord("C"));
    //key_atk = keyboard_check_pressed(ord("Z")) || keyboard_check_pressed(ord("X")) || keyboard_check_pressed(ord("C"))
    
    key_down = keyboard_check_pressed(vk_down);
    key_full = keyboard_check_pressed(ord ("P"));
    key_end  = keyboard_check_pressed(vk_escape);
    key_re = keyboard_check_pressed(ord("R"));
    
    break;
    
case 1:


    key_right = gamepad_button_check(0,gp_padr);
    key_left = gamepad_button_check(0,gp_padl);
    key_jumpInit = gamepad_button_check_pressed(0,gp_face1);
    key_jumpHold = gamepad_button_check(0,gp_face1);
    key_moveReleaseR = gamepad_button_check_released(0,gp_padr);
    //key_atkRelease = keyboard_check_released(ord("Z"));
    key_moveReleaseL = gamepad_button_check_released(0,gp_padl);
    key_movePressR = gamepad_button_check_pressed(0,gp_padr);
    key_movePressL = gamepad_button_check_pressed(0,gp_padl);
    
    
    key_atck = 
        gamepad_button_check_pressed(0,gp_face4) ||
        gamepad_button_check_pressed(0,gp_face2) ||
        gamepad_button_check_pressed(0,gp_face3);
    //key_atk = keyboard_check_pressed(ord("Z")) || keyboard_check_pressed(ord("X")) || keyboard_check_pressed(ord("C"))
    
    key_down = gamepad_button_check_pressed(0,gp_padd);
    key_full = gamepad_button_check_pressed(0,gp_shoulderl);
    key_end  = gamepad_button_check_pressed(0,gp_start);
    key_re = gamepad_button_check_pressed(0,gp_select);
    break;
}
//fullscreen\\

if (key_full)
{
    if (window_get_fullscreen())
    {
        window_set_fullscreen(false);
    }
    else
    {
        window_set_fullscreen(true);
    }
}
//end game\\
if (key_end)
{
    game_end();
}
//restart level

if (key_re) room_restart();


//React to inputs\\
if (key_right) move = 1;
else if (key_left) move = -1;
else if (!key_left &amp;&amp; !key_right) move = 0;
else if (key_left &amp;&amp; key_right) move = 0;

//grounded\\
if (place_meeting(x,y+1,obj_wall))
{
   grounded = 1;
   doubleJump = 0;
}
else
{
   grounded = 0; 
}



//move speed &amp; ramp\\
if (move != 0)
{
    if (!grounded) moveCap = 5;
    else
    {
        moveCap = 13;
    }
    if (moveSpeed &lt; moveCap)
    {
    moveSpeed += moveIncrement;
    }
    else
    {
        moveSpeed = moveSpeed;
    }
}

else
{
     moveSpeed = 0;
}

if (moveSpeed &gt;= 13) fullSpeed = true;

hsp = move * moveSpeed;

//final vars\\

vsp += grav;
finalHsp = hsp;


//horizontal collision\\
if (place_meeting(x+finalHsp,y,obj_wall))
{
    yplus = 0;
    while((place_meeting(x+finalHsp,y-yplus,obj_wall)) &amp;&amp; yplus&lt;= abs(1.5*finalHsp+1))
    { 
        yplus+=1
    }
    if place_meeting(x+finalHsp,y-yplus,obj_wall)
    {
        //if (place_meeting(x+finalHsp, y-yplus,obj_wall))
        //{
            //while(!place_meeting(x+sign(finalHsp),y,obj_wall))
            //{
            //    x += sign(move);
            //}
            finalHsp = 0;
        //}
    }
    else y-= yplus;
    
}


//vertical Collision\\
if (place_meeting(x,y+vsp,obj_wall))
{
    
   while(!place_meeting(x,y+sign(vsp),obj_wall))
   {
       y += sign(vsp);
   }
    vsp = 0;
    
}


//atck

if gamepad_button_check_pressed(0,gp_face2) atck_num = 0;
if gamepad_button_check_pressed(0,gp_face3) atck_num = 1;

//state switcher\\

if (grounded &amp;&amp; key_atck &amp;&amp; playerState != 'ATCK')
{
    playerState = 'BATK';
}

else if (grounded &amp;&amp; (key_moveReleaseR || key_moveReleaseL) &amp;&amp; fullSpeed &amp;&amp; playerState != 'ATCK')
{
    moveSpeed = 0;
    playerState = 'SLDE';
    image_index = 0;
}
else if (grounded &amp;&amp; (key_left &amp;&amp; key_right) &amp;&amp; fullSpeed &amp;&amp; playerState == 'WALK' &amp;&amp; playerState != 'ATCK')
{
    moveSpeed = 0;
    playerState = 'SLDE';
    image_index = 0;
}


else if (grounded &amp;&amp; (key_left &amp;&amp; key_right) &amp;&amp; !fullSpeed &amp;&amp; playerState != 'SLDE' &amp;&amp; playerState != 'ATCK')
{
    moveSpeed = 0;
    playerState = 'IDLE';
    image_index = 0;
}

else if (grounded &amp;&amp; move !=0 &amp;&amp; playerState != 'SLDE' &amp;&amp; playerState != 'ATCK')
{
    playerState = 'WALK';
    if (key_left != 0) slideMove = -1;
    if (key_right != 0) slideMove = 1;
}
else if (grounded &amp;&amp; moveSpeed == 0 &amp;&amp; playerState != 'SLDE' &amp;&amp; playerState != 'ATCK') playerState = 'IDLE';

// JUMP - FALL \\
if (grounded &amp;&amp; key_jumpInit)
{
    playerState = 'JUMP';
    instance_create(x,y,obj_jumpDust);
    image_index = 0;
}
else if (playerState =='JUMP' &amp;&amp; key_jumpInit)
{
    playerState = 'DJMP';
    image_index = 0;
}
else if (
    !grounded &amp;&amp; 
    y &gt;= abs(1.5*finalHsp+1) &amp;&amp;
    playerState != 'JUMP' &amp;&amp;
    playerState != 'DJMP' 

    )  playerState = 'FALL';

//------STATES-------\\

switch (playerState)
{
case 'BATK':
    sprite_index = atck[atck_num];
    image_index = 0;
    playerState = 'ATCK';
    finalX = view_xview[0];
    finalY = view_yview[0];
case 'ATCK':
    moveSpeed = 0;
    image_speed = .5;
    //finalX += slideMove*15.5
    if (image_index &gt;= image_number / 2)instance_create(x+slideMove*300,y-180,obj_attack);
    if (image_index &gt;= image_number - 20 &amp;&amp; image_index &lt;= image_number - 1) 
    {
        view_yview[0] += random_range(-8,8);
        view_xview[0] += random_range(-8,8);
        
    }
    if (image_index == image_number - 25)
    {
        audio_play_sound(snd_hammerHit,1,0);   
    }
    if (image_index &gt;= image_number - 1)
    {
        
        sprite_index = spr_player;
        if (place_meeting(x+slideMove*120,y,obj_wall))
        {
            x += 0;
        }
        else
        {
            x += slideMove * 120;
        }
        view_xview[0] = finalX;
        view_yview[0] = finalY;
        
        playerState = 'IDLE';
    }
    
    
    break;

    
case 'IDLE':
    image_speed = .5;
    sprite_index = spr_player;
    fullSpeed = 0;
    if (move != 0) image_xscale = move;
    //image_index = 0;
    break;

case 'WALK':
    image_speed = .5;
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_run;
    image_xscale = move;
    break;

case 'SLDE':
    image_speed = .5;
    fullSpeed = 0;
    if (place_meeting(x+slideMove*2,y,obj_wall))
    {
        x += 0;
    }
    else
    {
        x += slideMove*2;
    }
    y += vsp;
    sprite_index = spr_player_slide;
    if (image_index &gt;= image_number - 1)
    {
        if (key_left || key_right) playerState = 'WALK';
        else playerState = 'IDLE';
        moveSpeed = 0;
    }
    break;

case 'JUMP':
    vsp = -jumpSpeed;
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_jump_up;
    image_xscale = slideMove;
    //else image_xscale = 1;
    if (image_index &gt;= image_number - 1)
    {
        image_speed = 0;
    }
    if (key_jumpHold &amp;&amp; (jumpIncrement &lt; jumpCap)) 
        {
            jumpIncrement += jumpPlus;
            vsp = -jumpSpeed; 
        }
    else
        {
            playerState = 'FALL';
            jumpIncrement = 0;
        }

    if (place_meeting(x,y-10,obj_wall))
    {
        playerState = 'FALL';
        jumpIncrement = 0;
    }
   
    
    break;

case 'DJMP':
    doubleJump = 1;
    vsp = -jumpSpeed;
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_jump_up;
    if (move != 0) image_xscale = move;
    //else image_xscale = 1;
    if (image_index &gt;= image_number - 1)
    {
    image_speed = 0;
    }
    if (key_jumpHold &amp;&amp; (jumpIncrement &lt; jumpCap)) 
        {
            jumpIncrement += jumpPlus;
            vsp = -jumpSpeed; 
        }
    else
        {
            playerState = 'FALL';
            jumpIncrement = 0;
        }

    if (place_meeting(x,y-1,obj_wall))
    {
        playerState = 'FALL';
        jumpIncrement = 0;
    }
    break;

case 'FALL':
    x += finalHsp;
    y += vsp;
    image_speed = .5
    sprite_index = spr_player_jump_dn;
    if (move != 0) image_xscale = move;
  

    //if (image_index &gt;= image_number - 1)
    //{
    //image_speed = 0;
    //}
     if (key_jumpInit &amp;&amp; doubleJump == 0)
    { 
        playerState = 'DJMP';
    }
    break;

default:
    sprite_index = spr_player;
    if (move != 0) image_xscale = move;
    else image_xscale = 1;
    break;

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(font0);
draw_text (view_xview[0]+20,view_yview[0]+20,playerState);
draw_text (view_xview[0]+20,view_yview[0]+40,sprite_index);
draw_text (view_xview[0]+20,view_yview[0]+60,moveSpeed);
draw_text (view_xview[0]+20,view_yview[0]+80,grounded);
draw_text (view_xview[0]+20,view_yview[0]+100,slideMove);
draw_text (view_xview[0]+20,view_yview[0]+120,fullSpeed);
draw_text (view_xview[0]+20,view_yview[0]+140,'PRESS START ON CONTROLLER TO QUIT');
draw_text (view_xview[0]+20,view_yview[0]+160,'"O" ON KEYBOARD SWITCHES BETWEEN KEYS AND CONTROLLER');
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
