<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = .7;
vsp = 0;
hsp = 0;
move = 0;
slideMove = 1;

//move
moveSpeed = 0;
moveIncrement = .5;
moveCap = 15;
finalHsp = 0;
fullSpeed = 0;

//jump
jumpSpeed = 10;
jumpCap = 8;
grounded = 0;
jump = 0;
jumpIncrement = 0;
jumpPlus = 0.5;

//life n death
lifepts = 0;

//platCol = 0;

playerState = '';

image_speed = 0.50;
depth = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO STUFF PLZ
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jumpInit = keyboard_check_pressed(vk_up);
key_jumpHold = keyboard_check(vk_up);
key_moveReleaseR = keyboard_check_released(vk_right);
key_moveReleaseL = keyboard_check_released(vk_left);

key_atk_1 = keyboard_check_pressed(ord("Z"));
//key_atk = keyboard_check_pressed(ord("Z")) || keyboard_check_pressed(ord("X")) || keyboard_check_pressed(ord("C"))

key_down = keyboard_check_pressed(vk_down);
key_full = keyboard_check_pressed(ord ("P"));
key_end  = keyboard_check_pressed(vk_escape);
key_re = keyboard_check_pressed(ord("R"));

//fullscreen\\

if (key_full)
{
    if (window_get_fullscreen())
    {
        window_set_fullscreen(false);
    }
    else
    {
        window_set_fullscreen(true);
    }
}
//end game\\
if (key_end)
{
    game_end();
}
//restart level

if (key_re) room_restart();


//React to inputs\\

//grounded\\
if (place_meeting(x,y+1,obj_wall))
{
   grounded = 1;
}
else
{
   grounded = 0; 
}

//final vars\\

vsp += grav;
finalHsp = hsp;

//direction to move\\
move = key_left + key_right;

if (key_left != 0) slideMove = -1;
else if (key_right != 0) slideMove = 1;

if (move !=0)
{
    image_xscale = move;
}

//move speed &amp; ramp\\
if (move != 0)
{
    if (!grounded) moveCap = 5;
    else
    {
        moveCap = 13;
    }
    if (moveSpeed &lt; moveCap)
    {
    moveSpeed += moveIncrement;
    }
    else
    {
        moveSpeed = moveSpeed;
    }
}

else
{
     moveSpeed = 0;
}

if (moveSpeed &gt;= 13) fullSpeed = true;

hsp = move * moveSpeed;


//horizontal collision\\
if (place_meeting(x+finalHsp,y,obj_wall))
{
    while(!place_meeting(x+sign(finalHsp),y,obj_wall))
    {
        x += sign(move);
    }
    finalHsp = 0;
}

//vertical Collision\\
if (place_meeting(x,y+vsp,obj_wall))
{
   while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}



//state switcher\\
if (grounded &amp;&amp; move !=0) playerState = 'WALK';
else if (grounded &amp;&amp; (key_moveReleaseR || key_moveReleaseL) &amp;&amp; fullSpeed)
{
     playerState = 'SLDE';
     image_index = 0;
}
else if (grounded &amp;&amp; !move &amp;&amp; playerState != 'SLDE') playerState = 'IDLE';
//else if (grounded &amp;&amp; key_atk_1) playerState = 'ATCK';
if (grounded &amp;&amp; key_jumpInit)
{
    playerState = 'JUMP';
    image_index = 0;
}
else if (!grounded &amp;&amp; playerState != 'JUMP') playerState = 'FALL';

//STATES\\

switch (playerState)
{
case 'IDLE':
    image_speed = .5;
    sprite_index = spr_player;
    fullSpeed = 0;
    //image_index = 0;
    break;

case 'WALK':
    image_speed = .5;
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_run;
    break;

case 'SLDE':
    image_speed = 0.5;
    x += slideMove*2;
    y += vsp;
    sprite_index = spr_player_slide;
    if (image_index &gt;= image_number - 1)
    {
        playerState = 'IDLE';
    }
    break;

case 'JUMP':
    vsp = -jumpSpeed;
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_jump_up;
    if (image_index &gt;= image_number - 1)
    {
    image_speed = 0;
    }
    if (key_jumpHold &amp;&amp; (jumpIncrement &lt; jumpCap)) 
        {
            jumpIncrement += jumpPlus;
            vsp = -jumpSpeed; 
        }
    else
        {
            playerState = 'FALL';
            jumpIncrement = 0;
        }

    if (place_meeting(x,y-1,obj_wall))
    {
        playerState = 'FALL';
        jumpIncrement = 0;
    }
    break;

case 'FALL':
    x += finalHsp;
    y += vsp;
    sprite_index = spr_player_jump_dn;
  

    if (image_index &gt;= image_number - 1)
    {
    image_speed = 0;
    }
    break;

case 'ATK1':
    sprite_index = spr_player_atk_1;
    image_index = 0;
    break;



default:
    sprite_index = spr_player;
    break;

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text (view_xview[0]+20,view_yview[0]+20,playerState);
draw_text (view_xview[0]+20,view_yview[0]+40,sprite_index);
draw_text (view_xview[0]+20,view_yview[0]+60,moveSpeed);
draw_text (view_xview[0]+20,view_yview[0]+80,grounded);
draw_text (view_xview[0]+20,view_yview[0]+100,slideMove);
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
